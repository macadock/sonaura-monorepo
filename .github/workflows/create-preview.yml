name: 'Deploy preview branch'

on:
  workflow_run:
    workflows:
      - Lint
    types:
      - in_progress

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-preview-branch:
    environment: preview
    env:
      BRANCH_NAME: ${{ github.event.workflow_run.head_branch }}

    name: Deploy preview branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        uses: ./.github/actions/set-env-variables
        with:
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          API_URL: ${{ vars.API_URL }}
          WEBSITE_URL: ${{ vars.WEBSITE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL_S3: ${{ secrets.AWS_ENDPOINT_URL_S3 }}
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Deploy terraform
        uses: ./.github/actions/deploy-terraform
        with:
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          WEBSITE_URL: ${{ vars.WEBSITE_URL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}

      - name: Add links to PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.workflow_run.pull_requests[0].number
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Preview URL')
            })

            // 2. Prepare format of the comment
            const output = `#### Preview URL ðŸ‘‰

            Marketing: [https://${{ env.BRANCH_NAME }}-${{ vars.WEBSITE_URL }}/](https://${{ env.BRANCH_NAME }}-${{ vars.WEBSITE_URL }}/)
            API: [https://${{ env.BRANCH_NAME }}-${{ vars.API_URL }}/api](https://${{ env.BRANCH_NAME }}-${{ vars.API_URL }}/api)`

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.payload.workflow_run.pull_requests[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

            github.rest.issues.addLabels({
                issue_number: context.payload.workflow_run.pull_requests[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['preview']
              })
name: 'Deploy preview environment'

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-infra:
    environment: preview
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ENDPOINT_URL_S3: ${{ secrets.AWS_ENDPOINT_URL_S3 }}
      TF_VAR_BRANCH_NAME: ${{ github.head_ref }}
      TF_VAR_API_URL: ${{ github.head_ref}}-${{ vars.API_URL }}
      TF_VAR_WEBSITE_URL: ${{ github.head_ref}}-${{ vars.WEBSITE_URL }}
      TF_VAR_ENVIRONMENT: ${{ vars.ENVIRONMENT }}
      TF_VAR_CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      TF_VAR_CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      TF_VAR_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      TF_VAR_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    name: Deploy preview infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy
        uses: ./.github/actions/infra
        with:
          INFRA_DIR: './packages/infra'
          BRANCH_NAME: ${{ env.TF_VAR_BRANCH_NAME }}

  deploy-apps:
    needs: deploy-infra
    environment: preview
    env:
      BRANCH_NAME: ${{ github.head_ref }}
    name: Deploy apps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy
        uses: ./.github/actions/deploy-app
        with:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}

      - name: Add link to PR comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Preview URL')
            })
            
            // 2. Prepare format of the comment
            const output = `#### Preview URL ðŸ‘‰
            
            [https://${{ github.head_ref}}-${{ vars.WEBSITE_URL }}/](https://${{ github.head_ref}}-${{ vars.WEBSITE_URL }}/)`
          
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

name: 'Update or destroy infra'
description: 'Update or destroy infra'
inputs:
  BRANCH_NAME:
    description: 'Terraform workspace name'
    required: true
  INFRA_DIR:
    description: 'Path to infra directory'
    required: false
    default: './packages/infra'
  DESTROY:
    description: 'Destroy infra'
    required: false
    default: 'false'
  API_URL:
    description: 'API URL'
    required: true
  WEBSITE_URL:
    description: 'Website URL'
    required: true
  AWS_ACCESS_KEY_ID:
    description: 'AWS access key ID'
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: 'AWS secret access key'
    required: true
  AWS_ENDPOINT_URL_S3:
    description: 'AWS endpoint URL'
    required: true
  ENVIRONMENT:
    description: 'Environment'
    required: true
  CLOUDFLARE_API_TOKEN:
    description: 'Cloudflare API token'
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: 'Cloudflare account ID'
    required: true
  CLOUDFLARE_ZONE_ID:
    description: 'Cloudflare zone ID'
    required: true
  SUPABASE_URL:
    description: 'Supabase URL'
    required: true
  SUPABASE_ANON_KEY:
    description: 'Supabase anon key'
    required: true
  GITHUB_TOKEN:
    description: 'The GitHub token'
    required: false

runs:
  using: "composite"
  steps:
    - name: Normalize branch name
      id: normalize-branch-name
      uses: ./.github/actions/normalize-branch-name
      with:
        BRANCH_NAME: ${{ inputs.BRANCH_NAME }}

    - name: Create environment variables
      id: create-environment-variables
      shell: bash
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ inputs.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ inputs.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_ENDPOINT_URL_S3=${{ inputs.AWS_ENDPOINT_URL_S3 }}" >> $GITHUB_ENV
        echo "TF_VAR_BRANCH_NAME=${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}" >> $GITHUB_ENV
        echo "TF_VAR_API_URL=${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}-${{ inputs.API_URL }}" >> $GITHUB_ENV
        echo "TF_VAR_WEBSITE_URL=${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}-${{ inputs.WEBSITE_URL }}" >> $GITHUB_ENV
        echo "TF_VAR_ENVIRONMENT=${{ inputs.ENVIRONMENT }}" >> $GITHUB_ENV
        echo "TF_VAR_CLOUDFLARE_API_TOKEN=${{ inputs.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
        echo "TF_VAR_CLOUDFLARE_ACCOUNT_ID=${{ inputs.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_ENV
        echo "TF_VAR_CLOUDFLARE_ZONE_ID=${{ inputs.CLOUDFLARE_ZONE_ID }}" >> $GITHUB_ENV
        echo "TF_VAR_SUPABASE_URL=${{ inputs.SUPABASE_URL }}" >> $GITHUB_ENV
        echo "TF_VAR_SUPABASE_ANON_KEY=${{ inputs.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
    
    - name: Set staging/prod env
      if: ${{ inputs.ENVIRONMENT != 'preview' }}
      id: set-staging-prod-env
      shell: bash
      run: |
        echo "TF_VAR_API_URL=${{ inputs.API_URL }}" >> $GITHUB_ENV
        echo "TF_VAR_WEBSITE_URL=${{ inputs.WEBSITE_URL }}" >> $GITHUB_ENV

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: terraform-init
      run: terraform init
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}

    - name: Terraform Workspace Select
      id: terraform-workspace-select
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}
      run: terraform workspace select -or-create=${{ inputs.DESTROY == 'true' && 'false' || 'true' }} ${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}

    - name: Terraform Format
      if: ${{ inputs.DESTROY == 'false' }}
      id: terraform-format
      run: terraform fmt -check
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}

    - name: Install dependencies
      if: ${{ inputs.DESTROY == 'false' }}
      run: npm install
      shell: bash

    - name: Build api
      if: ${{ inputs.DESTROY == 'false' }}
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy --name api-${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }} --dry-run --minify --outdir dist
        workingDirectory: "./apps/api"

    - name: Build frontend
      if: ${{ inputs.DESTROY == 'false' }}
      run: npm run build-ci
      shell: bash

    - name: Terraform Plan
      if: ${{ inputs.DESTROY == 'false' }}
      id: terraform-plan
      run: terraform plan -input=false
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}

    - name: Terraform Apply
      if: ${{ inputs.DESTROY == 'false' }}
      id: terraform-apply
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}
      run: terraform apply -auto-approve -input=false

    - name: Deploy marketing
      if: ${{ inputs.DESTROY == 'false' }}
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy ./.vercel/output/static --project-name marketing-${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }} --branch main
        workingDirectory: "./apps/marketing"

    - name: Terraform Destroy
      if: ${{ inputs.DESTROY == 'true' && inputs.BRANCH_NAME != 'main' }}
      id: terraform-destroy
      run: terraform destroy -auto-approve -input=false
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}

    - name: Terraform Workspace back to default
      if: ${{ inputs.DESTROY == 'true' && inputs.BRANCH_NAME != 'main' }}
      id: terraform-workspace-select-default
      run: terraform workspace select default
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}

    - name: Terraform Workspace Delete
      if: ${{ inputs.DESTROY == 'true' && inputs.BRANCH_NAME != 'main' }}
      id: terraform-workspace-delete
      run: terraform workspace delete ${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}
      shell: bash
      working-directory: ${{ inputs.INFRA_DIR }}

    - name: Add links to PR comment
      uses: actions/github-script@v7
      if: ${{ inputs.DESTROY == 'false' && github.event.workflow_run.event == 'pull_request' && inputs.GITHUB_TOKEN != '' }}
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.workflow_run.pull_requests[0].number
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Preview URL')
          })

          // 2. Prepare format of the comment
          const output = `#### Preview URL ðŸ‘‰

          Marketing: [https://${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}-${{ inputs.WEBSITE_URL }}/](https://${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}-${{ inputs.WEBSITE_URL }}/)
          API: [https://${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}-${{ inputs.API_URL }}/api](https://${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }}-${{ inputs.API_URL }}/api)`

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.payload.workflow_run.pull_requests[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

          github.rest.issues.addLabels({
              issue_number: context.payload.workflow_run.pull_requests[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['preview']
            })
name: 'Deploy app'

inputs:
  CLOUDFLARE_API_TOKEN:
    description: 'The Cloudflare API token'
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: 'The Cloudflare account ID'
    required: true
  ENVIRONMENT:
    description: 'The environment to deploy to'
    required: true
  BRANCH_NAME:
    description: 'The branch name'
    required: true
  GITHUB_TOKEN:
    description: 'The GitHub token'
    required: false
  WEBSITE_URL:
    description: 'The website URL'
    required: true
  API_URL:
    description: 'The API URL'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Normalize branch name
      id: normalize-branch-name
      uses: ./.github/actions/normalize-branch-name
      with:
        BRANCH_NAME: ${{ inputs.BRANCH_NAME }}

    - name: Install dependencies
      run: npm install
      shell: bash

    - name: Build frontend
      run: npm run build-ci
      shell: bash

    - name: Deploy marketing
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy ./.vercel/output/static --project-name marketing-${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }} --branch main
        workingDirectory: "./apps/marketing"

    - name: Build and deploy api
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy --name api-${{ steps.normalize-branch-name.outputs.NORMALIZED_BRANCH_NAME }} --minify
        workingDirectory: "./apps/api"

    - name: Add links to PR comment
      uses: actions/github-script@v7
      if: ${{ github.event.workflow_run.event == 'pull_request' && inputs.GITHUB_TOKEN != '' }}
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.workflow_run.pull_requests[0].number
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Preview URL')
          })

          // 2. Prepare format of the comment
          const output = `#### Preview URL ðŸ‘‰

          Marketing: [https://${context.payload.workflow_run.head_branch}-${{ inputs.WEBSITE_URL }}/](https://${context.payload.workflow_run.head_branch}-${{ inputs.WEBSITE_URL }}/)
          API: [https://${context.payload.workflow_run.head_branch}-${{ inputs.API_URL }}/api](https://${context.payload.workflow_run.head_branch}-${{ inputs.API_URL }}/api)`

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.payload.workflow_run.pull_requests[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
          
          github.rest.issues.addLabels({
              issue_number: context.payload.workflow_run.pull_requests[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['preview']
            })
